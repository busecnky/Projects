package com.busecnky;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.ArrayList;

public class Server {

    private static byte[] buff = new byte[256];
    private static final int PORT = 5000;
    private static ArrayList<Integer> users = new ArrayList<>();
    

    private static final InetAddress address;
    private static DatagramSocket socket;
    public static DatagramSocket udpServerSocket;
    
//    public Server() {
//    	listenSocket();
//    }
    
    
    static {
        try {
            socket = new DatagramSocket(PORT);
        } catch (SocketException e) {
            throw new RuntimeException(e);
        }
    }


    static {
        try {
            address = InetAddress.getByName("localhost");
        } catch (UnknownHostException e) {
            throw new RuntimeException(e);
        }
    }
    public void listenSocket() { 

 		System.out.println("Server has started");  
 		
             while(true){

 				 byte[] receiveData = new byte[1024];
               // create an empty DatagramPacket packet
               DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
               byte[] reply = new byte[1024];
                
              try {
 	         udpServerSocket.receive(receivePacket);  // receive incoming packets 
              } catch (IOException er) {
 	              System.out.println(er);
              }
                 if (receivePacket != null){  
 					int prt = receivePacket.getPort();
 					String s = new String(receivePacket.getData(),0,receivePacket.getLength());
 					/** If message is prepended with "HAL" server creates an instance of that client and adds them
 					 * to the arrayList of connected Clients  */
 					String substr = s.substring(0,3);
 					String nameSubstr = s.substring(3,s.length());
 					String serverResponce = "Thank you " + nameSubstr + " you have been authenticated by the server";
                     reply = serverResponce.getBytes();
 					if(substr.equals("HAL")){ 
 						/****************** Reply from server ************/
 						int replyPort = receivePacket.getPort();
 						System.out.println("server replying on port: " + replyPort);
 						DatagramPacket okPacket = new DatagramPacket(reply, reply.length, receivePacket.getAddress(), replyPort);
 						try {
 						udpServerSocket.send(okPacket);
 						 } catch (IOException er) {
 	                          System.out.println(er);
 			               }
 			 	    } // end of if
 			 	 
 				}
 		         receiveData =new byte[1024];  // flush packet
 			 
 		    } // end of while	
 	    
     } // end of listen socket
      
     

    public static void main(String[] args) {

        System.out.println("Server started on port " + PORT);

        while (true) {
            DatagramPacket packet = new DatagramPacket(buff, buff.length); 
            try {
                socket.receive(packet); 
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            String message = new String(packet.getData(), 0, packet.getLength()); 
            System.out.println("Server received: " + message);


            if (message.contains("HAL")) {
                users.add(packet.getPort());
            }
          
            else {
                int userPort = packet.getPort();  
                byte[] byteMessage = message.getBytes(); 

               
                for (int forward_port : users) {
                    if (forward_port != userPort) {
                        DatagramPacket forward = new DatagramPacket(byteMessage, byteMessage.length, address, forward_port);
                        try {
                            socket.send(forward);
                        } catch (IOException e) {
                            throw new RuntimeException(e);
                        }
                    }
                }
            }


        }
    }
}